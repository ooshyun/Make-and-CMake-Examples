cmake_minimum_required(VERSION 3.0.0)
project(SourceAssignment VERSION 0.1.0)

# Set Compiler
set(CMAKE_CXX_COMPILER "/usr/bin/clang++")

# Set C++ standard to C++20
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(LIBRARY)
  message(STATUS "Build Library...")
  add_library(CAssignment SHARED)
  include(AssignmentDLL/Config.cmake) 
  if (EXECUTE)
    set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/../../lib/bin)
  else()
    set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/../bin)
  endif()
  target_link_libraries(CAssignment "${PROJECT_SOURCE_DIR}/AssignmentDLL/lib/libsndfile.dylib")
endif()

if (EXECUTE)
  message(STATUS "Build Execute...")
  set(libCAssignment "${CMAKE_SOURCE_DIR}/build/lib/bin/libCAssignment.dylib")
  
  set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/../bin)
  add_executable(Assignment)

  include(Assignment_Console/Config.cmake)
  target_link_libraries(Assignment ${libCAssignment})
endif()

if (EXECUTE_GUI)
  message(STATUS "Build GUI Execute...")
  set(libCAssignment "${CMAKE_SOURCE_DIR}/build/lib/bin/libCAssignment.dylib")

  # set(CMAKE_PREFIX_PATH "/Users/seunghyunoh/Qt/5.12.5/clang_64/lib/cmake/Qt5")  # to find_package(Qt5)
  # set(CMAKE_PREFIX_PATH "/opt/homebrew/Cellar/qt/6.5.0/lib/cmake/Qt6")          # to find_package(Qt6 for arm64)
  set(CMAKE_PREFIX_PATH "/opt/homebrew/Cellar/qt@5/5.15.8_3/lib/cmake/Qt5")       # to find_package(Qt6 for arm64)
  set(CMAKE_AUTOUIC ON)                                                           # to gen ui_*.h
  find_package(Qt5 COMPONENTS Widgets REQUIRED)                                   # find Qt

  set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/../bin)
  add_executable(Assignment ${SOURCES})
  
  include(Assignment/Config.cmake)
  target_link_libraries(Assignment ${libCAssignment} Qt5::Widgets)
endif()